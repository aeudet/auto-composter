import random

# Major/Minor
majorMinor = random.choice(["major", "minor"])

# Key Section

if majorMinor == "major":
	key = random.choice(["C Major", "G Major", "D Major", "A Major", "E Major", "B Major", "F# Major", "Db Major", "Ab Major", "Eb Major", "Bb Major", "F Major"])
elif majorMinor == "minor":
	key = random.choice(["A Minor", "E Minor", "B Minor", "F# Minor", "C# Minor", "G# Minor", "Eb Minor", "Bb Minor", "F Minor", "C Minor", "G Minor", "D Minor"])

# Tempo Section

bpmRange = range(54,141) # Range of bpm
bpm = random.choice(bpmRange) # Chosen bpm

if bpm >= 54 and bpm < 65:
    tempo = "Allegro"
elif bpm >= 65 and bpm < 75:
    tempo = "Adagietto"
elif bpm >=75 and bpm < 84:
    tempo = "Andantino"
elif bpm >=84 and bpm < 90:
    tempo = "Andante"
elif bpm >=90 and bpm < 100:
    tempo = "Andante Moderato"
elif bpm >=100 and bpm < 112:
    tempo = "Moderato"
elif bpm >=112 and bpm < 116:
    tempo = "Allegro Moderato"
elif bpm >=116 and bpm < 141:
    tempo = "Allegro"
else:
	tempo = "Error"

# Song Length

songlengthRange = range(80,270) # Range of song length
bps = bpm/60
songlengthSecs = random.choice(songlengthRange) # Chosen song length
barsTotal = bps*songlengthSecs/4

#Chords

if majorMinor == "major":
	chordPool = ["I", "I", "ii", "iii", "IV", "IV", "V", "V", "vi"]
elif majorMinor == "minor":
	chordPool = ["i", "i", "III", "iv", "iv", "v", "v", "VI", "VII"]

# Generates a chord progression
def generateProgression(numberOfChords):
	progression = []
	for i in range(numberOfChords):
		randomChord = random.choice(chordPool)
		progression.append(randomChord)
	return progression

#Structure

sectionPool = ["A", "B", "C", "D", "E", "F"]

# Generates the song's structure
def generateStructure(numberOfSections):
	structure = []
	global sectionsUsed
	sectionsUsed = 0
	for i in range(numberOfSections):
		randomSection = random.choice(sectionPool[:sectionsUsed+1]) # Select from currently used sections +1 new
		if sectionsUsed > 0 and randomSection == structure[i-1]: # reduce repeat sections
			randomSection = random.choice(sectionPool[:sectionsUsed+1]) # reroll!
		if randomSection == sectionPool[sectionsUsed]: # Check if new section letter is used
			sectionsUsed += 1
		structure.append(randomSection)
	return structure

#Song

#Generate structure
totalSections = random.choice(range(3,7))
songStructure = generateStructure(totalSections)

#Generate progressions for each section
progressions = []
for i in range(sectionsUsed):
	totalChords = random.choice(range(3,6))
	progressions.append(generateProgression(totalChords))
	
	
# Output

# Display key
print key
# Display tempo
print tempo + ": " + str(bpm) + " bpm"
#Display structure
print "Structure:"
print songStructure
# Display progressions for each section
for i in range(sectionsUsed):
	print sectionPool[i] + ":"
	print progressions[i]
