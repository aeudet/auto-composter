total_sections = random.choice(range(3,8))

chain = {
    "A": {"A": 1, "B": 2, "C": 2, "D": 2, "E": 2, "F": 2},
    "B": {"A": 2, "B": 1, "C": 2, "D": 2, "E": 2, "F": 2},
    "C": {"A": 1, "B": 2, "C": 2, "D": 2, "E": 2, "F": 2},
    "D": {"A": 1, "B": 2, "C": 2, "D": 2, "E": 2, "F": 2},
    "E": {"A": 1, "B": 2, "C": 2, "D": 2, "E": 2, "F": 2},
    "F": {"A": 1, "B": 2, "C": 2, "D": 2, "E": 2, "F": 2}
    
}

def chain_gen(chain, start, length):
    prev = start[0:]
    for i in start:
        yield i
    for i in xrange(length):
        try:
            choice = random.randint(1, sum(chain[prev].values()))
            cumulative = 0
            for item, chance in sorted(chain[prev].items()):
                cumulative += chance
                if choice <= cumulative:
                    yield item
                    prev = prev[-1] + item
                    break
        except KeyError:
            break

print "".join(chain_gen(chain, "A", total_sections))
