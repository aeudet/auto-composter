import random

# Define the chain.
chain = {
    "A": {"A": 1, "B": 2, "C": 2, "D": 2, "E": 2, "F": 2},
    "B": {"A": 2, "B": 1, "C": 2, "D": 2, "E": 2, "F": 2},
    "C": {"A": 1, "B": 2, "C": 2, "D": 2, "E": 2, "F": 2},
    "D": {"A": 1, "B": 2, "C": 2, "D": 2, "E": 2, "F": 2},
    "E": {"A": 1, "B": 2, "C": 2, "D": 2, "E": 2, "F": 2},
    "F": {"A": 1, "B": 2, "C": 2, "D": 2, "E": 2, "F": 2}
}

def struct_gen(chain, start, length):
    depth = 1
    prev = start[-1:]
    for i in start:
        yield i
    adjusted_length = range(length)
    for i in adjusted_length:
        try:
            choice = random.randint(1, sum(chain[prev].values()))
            cumulative = 0
            for item, chance in sorted(chain[prev].items()):
                cumulative += chance
                if choice <= cumulative:
                    if sorted(chain[prev]).index(item) <= depth:
                        yield item
                        prev = item
                        if sorted(chain[prev]).index(item) == depth:
                        	depth += 1
                    else:
                    	adjusted_length.append(1)
                    break
        except KeyError:
            break

print "".join(struct_gen(chain, "A", 5))
